name: stack-linux

on: [push, pull_request]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      ## The targets we build with stack
      targets: >-
        libtorch-ffi
        libtorch-ffi-helper
        hasktorch
        codegen
        examples
        bounding-box
        dataloader-cifar10
        untyped-nlp
        tintin

    steps:

    - uses: actions/checkout@v4
      with:
        submodules: true

    ## Install external packages
    ########################################################################

    - name: Free disk space
      ## Andreas Abel, 2023-10-21, https://github.com/hasktorch/hasktorch/issues/684#issuecomment-1771041707
      ## This step cleans 6G, increasing the available diskspace from 25G to 31G.
      ## However, it takes 1min, so only activate it when really necessary.
      if:   false
      run: |
        df -h
        sudo swapoff -a
        sudo rm -f /swapfile
        sudo apt -y purge ghc* cabal-install* php* || true
        sudo apt autoremove -y || true
        sudo apt autoclean -y || true
        docker rmi $(docker image ls -aq)
        df -h

    ## This was the old step
    # - name: Setup packages
    #   run: |
    #     sudo rm -f /etc/apt/sources.list.d/sbt.list
    #     sudo apt update -qq
    #     sudo apt -y --allow-downgrades --allow-remove-essential --allow-change-held-packages install cmake curl wget unzip git libtinfo-dev python3 python3-yaml

    ## This is the step copied from cabal-linux.yml
    - name: Setup packages
      run: |
        sudo apt update -qq
        sudo apt -y --allow-downgrades --allow-remove-essential --allow-change-held-packages install locales software-properties-common apt-transport-https
        sudo bash -c "echo deb [trusted=yes] https://apt-hasktorch.com/apt ./ > /etc/apt/sources.list.d/libtorch.list"
        sudo rm -f /etc/apt/sources.list.d/sbt.list
        sudo apt update -qq
        ##sudo apt -y purge ghc* cabal-install* php* || true
        sudo apt -y --allow-downgrades --allow-remove-essential --allow-change-held-packages install build-essential zlib1g-dev liblapack-dev libblas-dev devscripts debhelper python3-pip cmake curl wget unzip git libtinfo-dev python3 python3-yaml
        sudo apt -y install libtorch=1.11.0+cpu-1 libtokenizers=0.1-1
      ## Stack is preinstalled on the GHA runners
      #  (wget -qO- https://get.haskellstack.org/ | sh) || true


    ## Setup stack
    ########################################################################

    - name: Setup stack, determine stack and resolver version
      ## Instruct stack to use the preinstalled ghc if its version matches the resolver
      run: |
        yq --version
        stack config set system-ghc --global true
        echo "STACK_ROOT     = ${STACK_ROOT}"
        # Determine stack version
        STACK_VERSION="$(stack --numeric-version)"
        echo "STACK_VERSION  = ${STACK_VERSION}"
        # Determine resolver used by this project
        STACK_RESOLVER=$(yq .resolver stack.yaml)
        echo "STACK_RESOLVER = ${STACK_RESOLVER}"
        # Save values for future steps
        cat >> "${GITHUB_ENV}" <<EOF
        STACK_VERSION=${STACK_VERSION}
        STACK_RESOLVER=${STACK_RESOLVER}
        EOF

    - name: List ~/.stack
      run: |
        du   -hd0    ~/.stack || true
        ls   -al     ~/.stack || true
        tree -L 2 -d ~/.stack || true

    ## Updating the stack pantry (package index)
    ########################################################################
    ##
    ## `stack update` must come before `stack setup` (which includes a `stack update` if no pantry is present)

    - name: Restore cached stack package index
      uses: actions/cache/restore@v3
      id:   cache-pantry
      with:
        path: ~/.stack/pantry
        key:  ${{ runner.os }}-stack-${{ env.STACK_VERSION }}-resolver-${{ env.STACK_RESOLVER }}-pantry

    - name: Update stack package index
      if:   steps.cache-pantry.outputs.cache-hit != 'true'
      run: |
        stack update

    - name: Cache stack package index
      if:   steps.cache-pantry.outputs.cache-hit != 'true'
      uses: actions/cache/save@v3
      with:
        path: ~/.stack/pantry
        key:  ${{ steps.cache-pantry.outputs.cache-primary-key }}

    - name: List ~/.stack
      run: |
        du   -hd0    ~/.stack || true
        ls   -al     ~/.stack || true
        tree -L 2 -d ~/.stack || true

    ## Installing GHC via Stack
    ########################################################################
    ##
    ## The GHC version is determined by the resolver as specified in stack.yaml.
    ## Thus, we let Stack install GHC here,
    ## but we cache it separately so it does not get duplicated over caches.

    - name: Restore cached GHC
      uses: actions/cache/restore@v3
      id:   cache-ghc
      with:
        path: ~/.stack/programs
        key:  ${{ runner.os }}-stack-${{ env.STACK_VERSION }}-resolver-${{ env.STACK_RESOLVER }}-programs

    - name: Setup GHC via stack
      run: |
        stack setup
        GHC_VERSION="$(stack ghc -- --numeric-version)"
        echo "GHC_VERSION=${GHC_VERSION}" >> "${GITHUB_ENV}"
        # Remove tarball
        find ~/.stack -name "ghc*.tar.bz2" -delete

    - name: Cache GHC
      if:   steps.cache-ghc.outputs.cache-hit != 'true'
      uses: actions/cache/save@v3
      with:
        path: ~/.stack/programs
        key:  ${{ steps.cache-ghc.outputs.cache-primary-key }}

    - name: List ~/.stack
      run: |
        du   -hd0    ~/.stack || true
        ls   -al     ~/.stack || true
        tree -L 2 -d ~/.stack || true

    ## Building the dependencies
    ########################################################################

    - name: Stack build plan
      run: |
        stack build --test --dry-run 2> .plan.txt
        cat .plan.txt

    - name: Restore cached dependencies
      uses: actions/cache/restore@v3
      id:   cache-deps
      env:
        key: ${{ runner.os }}-stack-${{ env.STACK_VERSION }}-ghc-${{ env.GHC_VERSION }}-deps
      with:
        path: |
          ~/.stack/snapshots
          ~/.stack/stack.sqlite3
        key: ${{ env.key }}-resolver-${{ env.STACK_RESOLVER }}-plan-${{ hashfiles('stack.yaml', '.plan.txt') }}
        restore-keys: |
             ${{ env.key }}-resolver-${{ env.STACK_RESOLVER }}-
             ${{ env.key }}-

    - name: Build dependencies
      if:   steps.cache-deps.outputs.cache-hit != 'true'
      run: |
        stack build --test --only-dependencies

    - name: Cache dependencies
      if:   steps.cache-deps.outputs.cache-hit != 'true'
      uses: actions/cache/save@v3
      with:
        path: |
          ~/.stack/snapshots
          ~/.stack/stack.sqlite3
        key:  ${{ steps.cache-deps.outputs.cache-primary-key }}

    - name: List ~/.stack
      run: |
        du   -hd0    ~/.stack || true
        ls   -al     ~/.stack || true
        tree -L 2 -d ~/.stack || true

    ## Build and test the project
    ########################################################################

    - name: Build
      run: |
        #source setenv
        #pushd deps/ ; ./get-deps.sh -a cpu -c; popd
        stack build --test --no-run-tests \
          libtorch-ffi \
          libtorch-ffi-helper \
          hasktorch \
          codegen \
          examples \
          bounding-box \
          dataloader-cifar10 \
          untyped-nlp

    - name: List .stack-work
      run: |
        du   -hd0    .stack-work || true
        ls   -al     .stack-work || true
        tree -L 2 -d .stack-work || true

    - name: Test
      run: |
        #source setenv
        stack test codegen
        stack test libtorch-ffi
        stack test hasktorch

    - name: List .stack-work
      run: |
        du   -hd0    .stack-work || true
        ls   -al     .stack-work || true
        tree -L 2 -d .stack-work || true

    - name: Runs
      run: |
        stack exec codegen-exe
        stack exec xor-mlp

    - name: Build tutorial
      run: |
        pushd deps/ ; ./get-deps.sh -a cpu -c; popd
        stack build --test --no-run-tests tintin
        pushd hasktorch
        stack exec tintin -- run
        popd
        mkdir -p public/tutorial
        cp -r hasktorch/.stack-work/tintin/rendered/* public/tutorial

    - name: List .stack-work
      run: |
        du   -hd0    .stack-work || true
        ls   -al     .stack-work || true
        tree -L 2 -d .stack-work || true

    - name: Deploy tutorial
      if: github.event_name == 'push' && github.ref == 'refs/heads/master'
      uses: peaceiris/actions-gh-pages@v3
      with:
        deploy_key: ${{ secrets.ACTIONS_DEPLOY_KEY }}
        external_repository: hasktorch/hasktorch.github.io
        publish_branch: tutorial
        publish_dir: ./public
